func IncrementEpisode(w http.ResponseWriter, r *http.Request) {
    id := mux.Vars(r)["id"]

    // Obtener el último episodio visto y el total de episodios
    var lastEp int
    var totalEp *int
    row := db.QueryRow("SELECT last_episode_watched, total_episodes FROM series WHERE id = ?", id)
    if err := row.Scan(&lastEp, &totalEp); err != nil {
        http.Error(w, "Serie no encontrada", http.StatusNotFound)
        return
    }

    // Verificar si se puede incrementar
    if totalEp != nil && lastEp >= *totalEp {
        http.Error(w, "No se puede incrementar el episodio", http.StatusBadRequest)
        return
    }

    // Incrementar el último episodio visto
    _, err := db.Exec("UPDATE series SET last_episode_watched = last_episode_watched + 1 WHERE id = ?", id)
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }

    w.WriteHeader(http.StatusOK)
    json.NewEncoder(w).Encode(map[string]string{"message": "Episodio incrementado"})
}

func UpvoteRanking(w http.ResponseWriter, r *http.Request) {
    id := mux.Vars(r)["id"]
    _, err := db.Exec("UPDATE series SET ranking = COALESCE(ranking, 0) + 1 WHERE id = ?", id)
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }
    w.WriteHeader(http.StatusOK)
    json.NewEncoder(w).Encode(map[string]string{"message": "Upvote exitoso"})
}

func DownvoteRanking(w http.ResponseWriter, r *http.Request) {
    id := mux.Vars(r)["id"]
    _, err := db.Exec("UPDATE series SET ranking = COALESCE(ranking, 0) - 1 WHERE id = ?", id)
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }
    w.WriteHeader(http.StatusOK)
    json.NewEncoder(w).Encode(map[string]string{"message": "Downvote exitoso"})
}

func UpdateStatus(w http.ResponseWriter, r *http.Request) {
    id := mux.Vars(r)["id"]
    
    var requestBody struct {
        Status string `json:"status"`
    }
    if err := json.NewDecoder(r.Body).Decode(&requestBody); err != nil {
        http.Error(w, "Error al decodificar la solicitud", http.StatusBadRequest)
        return
    }
}


//dentro del main
    r.HandleFunc("/api/series/{id}/episode", IncrementEpisode).Methods("PATCH")
    r.HandleFunc("/api/series/{id}/upvote", UpvoteRanking).Methods("PATCH")
    r.HandleFunc("/api/series/{id}/downvote", DownvoteRanking).Methods("PATCH")
    r.HandleFunc("/api/series/{id}/status",     UpdateStatus).Methods("PATCH")